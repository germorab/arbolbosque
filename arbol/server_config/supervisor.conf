[unix_http_server]
file=/tmp/supervisor.sock ; (the path to the socket file)
 
[supervisord]
logfile=/root/server/logs/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10 ; (num of main logfile rotation backups;default 10)
loglevel=info ; (log level;default info; others: debug,warn,trace)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false ; (start in foreground if true;default false)
minfds=1024 ; (min. avail startup file descriptors;default 1024)
minprocs=200 ; (min. avail process descriptors;default 200)
 
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
 
[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket
 
# UWSGI
[program:bosque_uwsgi]
command=/home/bosque/.virtualenvs/bosque/bin/uwsgi
        -m
        --http 127.0.0.1:8013
        --processes 1
        --wsgi-file /home/bosque/www/arbolbosque/arbol/wsgi.py
        --pythonpath /home/bosque/www/arbolbosque/
        --pidfile /home/bosque/uwsgi.pid
        --home /home/bosque/.virtualenvs/bosque
        --master
        --uid=bosque
directory=/home/bosque/www/arbolbosque/
user=bosque
autostart=true
autorestart=true
stdout_logfile=/home/bosque/bosque_logs/uwsgi.log
redirect_stderr=true
environment=HOME=/home/bosque,USER=user
stopsignal=INT

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
